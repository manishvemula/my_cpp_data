Operators
• Various types of operators are supported by C++
• They are categorised as
• unary
• binary
• ternary
• Each operator has its precedence and associativity
• Higher precedence operators are executed first
Expression
• Expression contains operands and operator
• Expressions results in a single value
• datatype of result of expression is the largest datatype used in expression

********************************

Conditional Statements
• If and else is used for writing conditional statement
• If condition is true then if block is executed
• If condition is false then else block is executed
• 0 - means false
• 1- means true or non0zero value is also true
If can be nested inside if as well as else statement
Nesting of is is also written as else-if ladder

************************************************************************
Switch
• Switch is a branch and control statement
• Switch can have 0 or more cases
• Each case is defined with a label
• Depending on the value of expression in switch corresponding case black is executed
• Is a case block is not available then default block is executed
• Default block is optional
• Every case block must terminate with break
• If breaks are not mentioned then cases will fall thru
• Switch is used for menu-driven programs
*************************************************************************

Loops
• Loops are iterative statements
• Block of statements are repeatedly executed as long as condition is true
• Condition given in loop must become false after some finite iterations otherwise its a
infinite loop
• Values used in condition must update inside the body of finite loop
• Four types of loops
•
•
•
•
•
pre-tested loop
while()
post-tested loop do..while()
counter controlled loop
for()
for each loop for Collections
for()

******************************************************************************

Arrays
• Array is a collection of similar data elements under one name, each element is
accessible using its index
• Memory for array is allocated contagiously
• For-each loop is used for accessing array
• N-dimension arrays are supported by C++
• Two-Dimensional Arrays are sued for Matrices
• Array can be created in Stack or Heap Section of memory

********************************************************************************

Pointer
• Pointer is address variable
• It can store the address of data
• Pointer are used for accessing heap memory
• 5 Arithmetic operations are allowed pointer
• p++ - move pointer to next element
• p - - move pointer to previous element
• p+k gives address of kth element form pointer location to right
• p-k gives address of kth element from pointer location to left
• q-p gives number of elements between 2 pointers p and q
• Pointers can be of many levels
• Double pointer is used for accessing 2D arrays
Program to Demonstrate Pointer Syntax
#include <iostream>
using namespace std;
int main()
{
int a=10;
int *p=&a;
cout<<a<<endl;
cout<<&a<<endl;
cout<<p<<endl;
cout<<*p<<endl;
}
return 0;

**********************************************************


Reference
• Reference is a Alias of variable
• It must be initialised when declared
• It doesn’t take any memory
• It cannot be modified to refer other variable
• Syntax for reference declaration is
• Int &y=x;


***********************************************************************

Functions
• Function is a module which performs a specific task
• Functions are called by name
• Rules for giving function name is same as variable name
• Function can take 0 or more parameters
• Function can return single value
• Void function don’t return any value
• Default return type is int

****************************************************************************

Function Overloading
• If More than one functions can have same name, but different parameter list, then they
are overloaded functions
• Return the is not considered in overloading
• Function overloading is used for achieving compile time polymorphism
Program to Demonstrate Function Overloading using Sum function
#include<iostream>
using namespace std;
int sum(int a,int b)
{
return a+b;
}
float sum(float a,float b)
{
return a+b;
}
int sum(int a,int b,int c)
{
return a,b,c;
}
int main()
{
cout<<sum(10,5)<<endl;
cout<<sum(12.5f,3.4f)<<endl;
cout<<sum(10,20,3)<<endl;
}
return 0;

**************************************************************************************

Function Template
• Function template are used for defining generic functions
• They work for multiple datatypes
• Datatype is decided based on the type of value passed
• Datatype is a template variable
• Function can have multiple template variables
Example of Function Template
#include <iostream>
using namespace std;
template<class T>
T maxim(T a,T b)
{
return a>b?a:b;
}
int main()
{
cout<<maxim(12,14)<<endl;
cout<<maxim(2.3,1.4)<<endl;
cout<<maxim(2.3f,5.6f)<<endl;
return 0;
}

**********************************************************************************************

Default Arguments
• Parameters of a function can have default values
• If a parameter is default then , passing its value is options
• Function with default argument can be called with variable number of argument
• Default values to parameters must be given from right side parameter
• Default arguments are much useful in constructors
• Default arguments are useful for defining overloaded functions
Example of Default Arguments
#include <iostream>
using namespace std;
int sum(int a,int b,int c=0)
{
return a+b+c;
}
int main()
{
cout<<sum(10,20,3)<<endl;
}
return 0;

*********************************************************************************************

Parameter Passing Methods
Three parameter passing methods are supported by C++
Pass-By-Value : values of Actual parameters are passed to formal parameters. Actual
parameters cannot be modified by function
Pass-By-Address: Address of Actual Parameters are passed to a function, formal
parameters must be pointers. Function can indirectly access actual parameters.
Pass-By-Reference: Actual parameters are passed as reference to formal parameters,
function can modify actual parameters.
Program for Call by Value
• Value of actual parameters are copied in formal parameters
• If any changes done to formal parameters in function, they will not modify actual
parameters
Void swap(int a, int b)
{
int temp;
temp=a;
a=b;
b=temp;
}
Int main()
{
int x=10, y=20;
swap(x,y);
cout<<x<<y;
}

*******************************************************************************************************

Call by Address
• Address pf actual parameters are passed.
• Formal parameters must be pointers
• Formal parameters ca indirectly access actual parameters.
• Changes done using formal parameters will reflect in actual parameters
Void swap(int *x, int *y)
{
int temp;
temp=*x;
*x=*y;
*y=temp;
}
Int main()
{
int a=10, b=20;
swap(&a,&b);
cout<<a<<b;
}

*********************************************************************************************************

Call by Reference
• Actual parameters are passed as reference
• Formal parameters can directly access actual parameters
• Function call is converted into inline function, if not possible it will become call by
address
• Reference don’t take extra memory
• Syntax is same as Call by Value except, formal parameters are reference
Void swap(int &a, int &b)
{
int temp;
temp=a;
a=b;
b=temp;
}
Int main()
{
int x=10, y=20;
swap(x,y);
cout<<x<<y;
}

*********************************************************************************************************

Return by Address
• A function can return address of memory
• It should not return address of local variables, which will be disposed after function ends
• It can return address of memory allocated in heap
Int * fun(int n)
{
int *p=new int[n];
for(int i=0;i<n;i++)
p[i]=i+1;
return p;
}
Int main()
{
int *ptr=fun(5);
for(int i=0;i<5;i++)
cout<<i<<endl;
}

***********************************************************************************************************

Return by Reference
• A function cal return reference
• It should not return reference of its local variables
• It can return formal parameters if they are reference
Int & fun(int &a)
{
cout<<a;
return a;
}
Int main()
{
int x=10;
fun(x)=25;
cout<<x;
}

************************************************************************************************************

Static variables
• They have local scope but remain in memory thru out the execution of program
• They are created in code section
• They are history-sensitive
Void fun()
{
static int v=0;
int a=10;
v++:
cout<<a<<“ “<<v;
}
Int main()
{
fun();
fun();
fun();
}


***********************************************************************************************************

Object-Oriented Programming
Features of OOPS
• Abstraction
• Data Hiding
• Inheritance
• Polymorphism
Classes
• Class is a blue print of an object
• Class in a group of objects
• Class is a design of object
•
• Many object can be created from same class
• Object consumes memory equal to sum of sizes of all data members
• Member functions don’t occupy memory
• Member functions are called depending on object
• . Dot operator is used for accessing members of object
• Memory allocated for object is also called as instance


*****************************************************************************************************************

Pointer to an Object
• A pointer of type class can be created
• A pointer can point on existing object
• A new object can be created in heap using pointer
• Arrow operator is used for accessing members of an object using pointer
Data Hiding
• Data members of a class class are usually declared as Private or Protected,
• They can be accessed only inside the class and child classes
• Data finding protects data from mishandling
Constructors
• Constructor is a member function of a class
• It will have same name as class name
• It will not have return type
• Its should be public
• It can be declared as private also in some cases
• It is called when object is created
• It is used for initialising an object
• It can be overloaded
• If its not defined then class will have a default constructor
• Constructor can take default arguments
Types of constructors
• Non-argument constructor
• Parameterised constructor
• Copy constructor
All types of Member Functions
• Constructors - called when object is created
• Accessors - used for knowing the value of data members
• Mutators - used for changing value of data member
• Facilitator - actual functions of class
• Enquiry - used for checking if an object satisfies some condition
• Destructor - used for releasing resources used by object

***********************************************************************************************************************

Operator overloading
• Operators can be overloaded on our classes
• We can define operator for our own classes
• Operators can be overloaded using member functions or friend functions
• Global functions can also access private and protected members of an object if they are
declared as friend inside a class
class Complex
{
private:
int real;
int img;
public:
Complex(int r=0,int i=0)
{
real=r;
img=i;
}
void display()
{
cout<<real<<“+i”<<img<<endl;
}
Complex operator+(Complex c)
{
Complex temp;
temp.real=real+c1.real;
temp.img=img+c1.img;
return temp;
}
};
int main()
{
Complex c1(5,3),c2(10,5),c3;
c3=c1+c2;
}
c3.display();

*****************************************************************************************************


Stream operator overloading
Input stream cin >> (extraction) operator can be overloaded upon a class
output stream cout << (insertion) operator can be overloaded upon a class
#include <iostream>
using namespace std;
class Complex
{
private:
int real;
int img;
public:
Complex(int r=0,int i=0)
{
real=r;
img=i;
}
friend ostream & operator<<(ostream &out,Complex &c);
};
ostream & operator<<(ostream &out,Complex &c)
{
out<<c.real<<"+i"<<c.img<<endl;
return out;
}
int main()
{
Complex c(10,5);
cout<<c<<endl;
}
operator<<(cout,c);

*********************************************************************************************

Inheritance
• It is a process of acquiring features of an existing class into a new class
• It is used for achieving reusability
• features of base class will be available in derived class
#include <iostream>
using namespace std;
class Base
{
public:
int a;
void display()
{
cout<<"Display of Base "<<a<<endl;
}
};
class Derived:public Base
{
public:
void show()
{
cout<<"Show of Derived"<<endl;
}
};
int main()
{
Derived d;
d.a=100;
d.display();
d.show();
}

**************************************************************************************************


Constructors in inheritance
• Constructors of base class is executed first then the constructor of derived class is executed.
• By default, non-parameterised constructor of base class is executed.
• parameterised constructor of base class must be called from derived class constructor
Explain using base and derived class
#include <iostream>
using namespace std;
class Base
{
public:
Base(){cout<<"Non-param Base"<<endl;}
Base(int x){cout<<"Param of Base "<<x<<endl;}
};
class Derived:public Base
{
public:
Derived(){cout<<"Non-Param Derived"<<endl;}
Derived(int y){cout<<"Param of Derived "<<y<<endl;}
Derived(int x,int y):Base(x)
{
cout<<"Param of Derived "<<y<<endl;
};
}
int main()
{
Derived d(5,10);
}

***********************************************************************************************************

Access Specifiers
• Private - Accessible only inside a class
• Protected - Accessible inside a class and inside derived classes
• Public - accessible inside class, inside derived class and upon object
class Base
{
private: int a;
protected: int b;
public: int c;
void funBase()
{
a=10;
b=5;
c=15;
}
};
class Derived:public Base
{
public:
void funDerived()
{
a=10;
b=5;
c=15;
}
};
int main()
{
Base b;
b.a=10;
b.b=5;
b.c=20;
}


*****************************************************************************************************

Ways of inheritance
A class can be inherited in flowing ways
Publicly
Protectedly
Privately
-
-
-
All members of base will have same accessibility in derived class
All members of base will become protected in derived class
All members of base will become private in derived class
class Parent
{
private: int a;
protected: int b;
public: int c;
void funParent()
{
a=10;
b=5;
c=15;
}
};
class Child: private Parent
{
private:
protected:
public:
void funChild()
{
//a=10;
b=5;
c=15;
}
};
class GrandChild : public Child
{
public:
void funGrandChild()
{
//a=10;
//b=5;
//c=20;
}
};
int main()
{
// Child c;
//c.a=10;
//c.b=5;
//c.c=20;
}


/**********************************************************************************************

Base class Pointer pointing to derived class object
• Base class pointer can point on derived class object
• But only those functions which are in base class, can be called
• If derived class is having overrides functions they will not be called unless base class functions
are declared as virtual
• Derived class pointer cannot point on base class object
Example 1
class Base
{
public:
void fun1()
{
cout<<“fun1 of Base "<<endl;
}
};
Example 2
class Derived: public Base
{
public:
void fun2()
{
cout<<“fun2 of Derived"<<endl;
}
};
class Rectangle
{
public:
void area()
{
cout<<“Area of Rectangle"<<endl;
}
};
class Cuboid: public Rectangle
{
public:
void volume()
{
cout<<“Volume of Cuboid"<<endl;
}
};
Example 3
class BasicCar
{
public:
void start()
{
cout<<"Car started"<<endl;
}
};
class AdvanceCar: public BasicCar
{
public:
void playMusic(){
};
}
cout<<"Music Playing"<<endl;


**************************************************************************************************


Function Overriding
• Redefining a function of base class in derived class
• Function overriding is used for achieving runtime polymorphism
• Prototype of a overrides function must be exactly same as base class function
class Base
{
public:
void fun()
{
cout<<“fun of Base"<<endl;
}
};
class Derived: public Base
{
public:
void fun()
{
cout<<“fun of Derived"<<endl;
}
};
int main()
{
Derived d;
d.fun( );
}


*********************************************************************************************

Virtual Functions
• Virtual functions are used for achieving polymorphism
• Base class can have virtual functions
• Virtual functions can be overrides in derived class
• Pure virtual functions must be overrides by derived class
class BasicCar
{
public:
virtual void start(){cout<<"BasicCar started"<<endl;}
};
class AdvanceCar: public BasicCar
{
public:
void start(){cout<<"AdvanceCar Started"<<endl;}
};
int main()
{
BasicCar *p=new AdvanceCar();
p->start();
}



**********************************************************************************************

Polymorphism
• Same name diﬀerent actions
• Runtime Polymorphism is achieved using function overriding
• Virtual functions are abstract functions of base class
• Derived class must override virtual function
• Base class pointer pointing to derived class object and a override function is called
Summary: class car is defined, then sub classes override, then base class method made as
virtual the pure virtual
class Car
{
public:
virtual void start()=0;
};
class Innova:public Car
{
public:
void start(){cout<<"Innova Started"<<endl;}
};
class Swift:public Car
{
public:
void start(){cout<<"Swift Started"<<endl;}
};
int main()
{
//Car c;
Car *p=new Innova();
p->start();
p=new Swift();
p->start();
}


****************************************************************************************************

Abstract class
• Class having pure virtual function is a abstract class
• Abstract class can have concrete also.
• Object of abstract class cannot be created
• Derived class can must override pure virtual function, otherwise it will also become a abstract
class.
• Pointer of abstract class can be created
• Pointer of abstract class can hold object of derived class
• Abstract classes are used for achieving polymorphism
•
• Base class can be
• Concrete
• Abstract with some concrete and some pure virtual functions
• All virtual functions
Explain using base and derived class
using namespace std;
class Base
{
public:
virtual void fun1()=0;
virtual void fun2()=0;
};
class Derived :public Base
{
public:
void fun1()
{
cout<<"fun1 of Derived"<<endl;
}
void fun2()
{
cout<<"fun2 of Derived"<<endl;
}
};
int main()
{
Derived d;
d.fun1();
d.fun2();
}


**********************************************************************************

Friend functions and classes
• Friend functions are global functions
• They can access member of a class upon their objects
• A class can be declared as friend on another class
• All the functions of friend class can access private and protected members of other class
class Your;
class My
{
private:int a;
protected: int b;
public: int c;
friend Your;
};
class Your
{
public:
My m;
void fun()
{
m.a=10;
m.b=10;
m.c=10;
}
};
int main()
{
}


****************************************************************************************************

Static Members
• Static data members are members of a class
• Only one instance of static members is created and shared by all objects
• They can be accessed directly using class name
•
• Static members functions are functions of a class, they can be called using class name, without
creating object of a class.
• They can access only static data members of a class, they cannot access non-static members
of a class.
class Test
{
public:
int a;
static int count;
Test()
{
a=10;
count++;
}
static int getCount()
{
return count;
}
};
int Test::count=0;
int main()
{
Test t1,t2;
cout<<Test::getCount()<<endl;
cout<<t1.getCount()<<endl;
}


************************************************************************************


Exception handling
• Exceptions are Runtime errors
• Try and catch blacks are used for handling exceptions
• If exceptions are not handled then program may crash
• Exceptions must give a message to the user, giving correct reason on cause of exception
•
• A try block can have Multiple catch blocks
• Catch-All can catch all exception
• Catch-All must be a last block
• If classes in inheritance are used in catch block then child class should come first
#include <iostream>
using namespace std;
int division(int a,int b)throw(int)
{
if(b==0)
throw 1;
return a/b;
}
int main()
{
int x=10,y=2,z;
try
{
}
z=division(x,y);
cout<<z<<endl;
}
catch(int e)
{
cout<<"Division by zero "<<e<<endl;
}
cout<<"Bye"<<endl;


*******************************************************************************************************


Template functions and classes are generic classes
They can work for any type of data
Classes can support diﬀerent type of data
template<class T>
class Stack
{
private:
T *stk;
int top;
int size;
public:
Stack(int sz)
{
size=sz;
top=-1;
stk=new T[size];
}
void push(T x);
T pop();
};
template<class T>
void Stack<T>::push(T x)
{
if(top==size-1)
cout<<"Stack is Full";
else
{
top++;
stk[top]=x;
}
}
template<class T>
T Stack<T>::pop()
{
T x=0;
if(top==-1)
cout<<"Stack is Empty"<<endl;
else
{
x=stk[top];
top--;
}
return x;
}
int main()
{
Stack<float> s(10);
s.push(10);
s.push(23);
s.push(33);
}


**********************************************************************************************

PreProcessor Directives
• They are instructions to compiler
• They are processed before compilation
• They are used for defining symbolic constant
• They are used for defining functions
• They also support conditional definition
#include <iostream>
using namespace std;
#define max(x,y) (x>y?x:y)
#define msg(x) #x
#ifndef PI
#define PI 3.1425
#endif
int main()
{
cout<<PI;
cout<<max(10,12)<<endl;
cout<<msg(hello)<<endl;
}

**************************************************************************************************

Streams
• I/O Streams are used for input and output data to and from the program
• C++ provides class for accessing input output operations
• Iostream is a base class for all classes
• Istream is for input
• Cin is the object of istream
• ostream is for output
• Cout is an object of ostream
•
• ifstream is a file input stream
• ofstream is a file output stream
Writing in a File
int main()
{
ofstream of("Test.txt",ios::trunc);
of<<"John"<<endl;
of<<25<<endl;
of<<"CS"<<endl;
of.close();
}
Reading from File
int main()
{
ifstream ifs("Test.txt");
string name;
int roll;
string branch;
ifs>>name>>roll>>branch;
cout<<name<<endl<<roll<<endl<<branch<<endl;
ifs.close();
}

******************************************************************************************************

Serialization
• Serialization is a process of string and retrieving state of an object
• Class must have a default constructor
class Student
{
private:
string name;
int roll;
string branch;
public:
Student(){}
Student(string n,int r,string b)
{
name=n;
roll=r;
branch=b;
}
friend ofstream & operator<<(ofstream &ofs,Student s);
friend ifstream & operator>>(ifstream &ifs,Student &s);
friend ostream & operator<<(ostream &os,Student &s);
};
ofstream & operator<<(ofstream &ofs,Student s)
{
ofs<<s.name<<endl;
ofs<<s.roll<<endl;
ofs<<s.branch<<endl;
return ofs;
}
ifstream & operator>>(ifstream &ifs,Student &s)
{
ifs>>s.name;
ifs>>s.roll;
ifs>>s.branch;
return ifs;
}
ostream & operator<<(ostream &os,Student &s)
{
os<<"Name "<<s.name<<endl;
os<<"Roll "<<s.roll<<endl;
os<<"Branch "<<s.branch<<endl;
return os;
}
int main()
{
ofstream ofs("Test.txt");
Student s1("John",10,"CS");
ofs<<s1;
ofs.close();
Student s2;
ifstream ifs("Test.txt");
ifs>>s1;
cout<<s1;
}

************************************************************************************************

Program to Store Items in a File
#include<iostream>
#include<fstream>
using namespace std;
class Item
{
private:
string name;
float price;
int qty;
public:
Item(){}
Item(string n,float p,int q);
friend ifstream & operator>>(ifstream &fis,Item &i);
friend ofstream & operator<<(ofstream &fos,Item &i);
friend ostream & operator<<(ostream &os,Item &i);
};
int main()
{
int n;
string name;
float price;
int qty;
cout<<"Enter number of Item:";
cin>>n;
Item *list[n];
cout<<"Enter All Item "<<endl;
for(int i=0;i<n;i++)
{
cout<<"Enter "<<i+1<<" Item Name , price and quantity";
cin>>name;
cin>>price;
cin>>qty;
list[i]=new Item(name,price,qty);
}
ofstream fos("Items.txt");
for(int i=0;i<n;i++)
{
fos<<*list[i];
}
Item item;
ifstream fis("Items.txt");
for(int i=0;i<3;i++)
{
fis>>item;
cout<<"Item "<<i<<item<<endl;}
}
Item::Item(string n,float p,int q)
{
name=n;
price=p;
qty=q;
}
ofstream & operator<<(ofstream &fos,Item &i)
{
fos<<i.name<<endl<<i.price<<endl<<i.qty<<endl;
return fos;
}
ifstream & operator>>(ifstream &fis,Item &i)
{
fis>>i.name>>i.price>>i.qty;
return fis;
}
ostream & operator<<(ostream &os,Item &i)
{
os<<i.name<<endl<<i.price<<endl<<i.qty<<endl;
return os;
}


********************************************************************************************

Program to Store Items in a File using Vector class
#include<iostream>
#include<fstream>
#include<vector>
using namespace std;
class Item
{
private:
string name;
float price;
int qty;
public:
Item(){}
Item(string n,float p,int q);
friend ifstream & operator>>(ifstream &fis,Item &i);
friend ofstream & operator<<(ofstream &fos,Item &i);
friend ostream & operator<<(ostream &os,Item &i);
};
int main()
{
int n;
string name;
float price;
int qty;
cout<<"Enter number of Item:";
cin>>n;
vector<Item *> list;
cout<<"Enter All Item "<<endl;
for(int i=0;i<n;i++)
{
cout<<"Enter "<<i+1<<" Item Name , price and quantity";
cin>>name;
cin>>price;
cin>>qty;
list.push_back(new Item(name,price,qty));
}
ofstream fos("Items.txt");
vector<Item *>::iterator itr;
for(itr=list.begin();itr!=list.end();itr++)
{
fos<<**itr;
}
Item item;
ifstream fis("Items.txt");for(int i=0;i<3;i++)
{
fis>>item;
cout<<"Item "<<i<<endl<<item<<endl;
}
}
Item::Item(string n,float p,int q)
{
name=n;
price=p;
qty=q;
}
ofstream & operator<<(ofstream &fos,Item &i)
{
fos<<i.name<<endl<<i.price<<endl<<i.qty<<endl;
return fos;
}
ifstream & operator>>(ifstream &fis,Item &i)
{
fis>>i.name>>i.price>>i.qty;
return fis;
}
ostream & operator<<(ostream &os,Item &i)
{
os<<i.name<<endl<<i.price<<endl<<i.qty<<endl;
return os;
}

***************************************************************************************

Ellipsis
• Used for defining variable argument functions
• … is used as symbol of ellipsis
• Printf and scanf of C language are example of ellipsis
int sum(int n,...)
{
va_list list;
va_start(list,n);
}
int x;
int s=0;
for(int i=0;i<n;i++)
{
x=va_arg(list,int);
s+=x;
}
return s;
int main()
{
cout<<sum(3,10,20,30)<<endl;
cout<<sum(5,1,2,3,4,5)<<endl;
}

*********************************************************************************

DATA TYPES:
#include<iostream>
using namespace std;
int main()
{
char a='A';
cout<<a<<endl;
char b=65;
cout<<b<<endl;
char c=0x41;
cout<<c<<endl;
char d=65.5;
cout<<d<<endl;
float f=123.56;
cout<<f<<endl;
float g=123e2;
cout<<g<<endl;
float h=123e-2;
cout<<h<<endl;
}
string i="Hello";
cout<<i<<endl;
#include<iostream>
using namespace std;
int main()
{
int a=10;
cout<<a<<endl;
int b=010;
cout<<b<<endl;
int c=0x10;
cout<<c<<endl;
int d(10);
cout<<d<<endl;
int f=(10);
cout<<f<<endl;
int g{10};
cout<<g<<endl;
}
int h={10};
cout<<h<<endl;
return 0;

****************************************************************************************




